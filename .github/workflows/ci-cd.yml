name: ScreenshotOCR CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
        
    - name: Install dependencies
      run: |
        cd web
        npm ci
        
    - name: Run linting
      run: |
        cd web
        npm run lint || true # Don't fail on lint errors initially
        
    - name: Run frontend tests
      run: |
        cd web
        npm test -- --coverage --watchAll=false
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./web/coverage/lcov.info
        flags: frontend
        
    - name: Build frontend
      run: |
        cd web
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: web/build/

  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: screenshotocr
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: screenshotocr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-deu
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r api/api_requirements.txt
        pip install -r OCR/ocr_requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx
        
    - name: Run API tests
      env:
        DATABASE_URL: postgresql://screenshotocr:testpass@localhost:5432/screenshotocr_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test_jwt_secret_key_for_testing_only
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cd api
        python -m pytest -xvs --cov=. --cov-report=xml
        
    - name: Run OCR tests
      env:
        REDIS_URL: redis://localhost:6379
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cd OCR
        python -m pytest -xvs --cov=. --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./api/coverage.xml,./OCR/coverage.xml
        flags: backend

  # Existing Test Suite
  existing-tests:
    name: Run Existing Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r testing/requirements.txt || pip install requests pillow opencv-python pytesseract
        
    - name: Run existing test suite
      run: |
        cd testing
        node node_test_runner.js || true # Don't fail on domain issues
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: existing-test-results
        path: testing/test-results-*.json

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  # Docker Build and Push
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    strategy:
      matrix:
        service: [api, ocr, web]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/DOCKERFILE
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create test environment
      run: |
        cp env.example .env
        sed -i 's/your_openai_api_key_here/${{ secrets.OPENAI_API_KEY }}/' .env
        sed -i 's/web.korczewski.de/localhost/' .env
        
    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.yml up -d
        sleep 30 # Wait for services to start
        
        # Run health checks
        curl -f http://localhost/api/health || exit 1
        
        # Run integration test suite
        cd testing
        python -m pytest integration_tests/ || true
        
    - name: Collect logs
      if: always()
      run: |
        docker-compose logs > integration-logs.txt
        
    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-logs
        path: integration-logs.txt
        
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'schedule' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup test environment
      run: |
        cp env.example .env
        sed -i 's/your_openai_api_key_here/${{ secrets.OPENAI_API_KEY }}/' .env
        sed -i 's/web.korczewski.de/localhost/' .env
        
    - name: Run performance tests
      run: |
        docker-compose up -d
        sleep 30
        
        # Run performance benchmarks
        cd testing
        node test_api_performance_benchmark.js > performance-results.json
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: testing/performance-results.json

  # Deployment (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /home/patrick/ScreenshotOCR
          git pull origin main
          ./rebuild.sh
          
    - name: Health check
      run: |
        sleep 30
        curl -f https://web.korczewski.de/api/health || exit 1
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: 'ScreenshotOCR deployed successfully to production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: 'ScreenshotOCR deployment to production failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deployment (Staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging server
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment logic here
        
    - name: Run staging tests
      run: |
        echo "Running staging tests..."
        # Add staging test suite here

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Clean up old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          // Keep only the latest 5 artifacts
          const toDelete = artifacts.data.artifacts.slice(5);
          
          for (const artifact of toDelete) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
            });
          } 